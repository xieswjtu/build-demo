
// 函数提升（Hoisting）是 JavaScript 中的一个机制，指的是变量和函数声明在代码执行之前被“提升”到其作用域的顶部。
// 对于函数提升，以下是提升的内容：

// 函数声明：完整的函数声明会被提升到其所在作用域的顶部，因此可以在声明之前调用函数。例子：
greet(); // 输出: Hello
function greet() {
  console.log('Hello');
}
// 在这个例子中，greet 函数虽然在调用之后才定义，但由于函数声明提升，可以在其定义之前调用它。

// 函数表达式：与函数声明不同，函数表达式不会被提升。以下是一个例子：
greet(); // 报错：greet is not a function
var greet = function() {
  console.log('Hello');
};
// 这里，greet 被视为一个变量，在函数表达式赋值之前，它的值是 undefined。因此，调用它会抛出错误。

// 总而言之，函数提升提升的是函数声明，而不是函数表达式。如果使用 var 声明函数表达式，则变量本身会被提升，但不会提升赋值部分。